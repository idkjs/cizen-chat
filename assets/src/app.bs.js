// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Phx = require("bucklescript-phx/src/phx.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Room$CizenChat = require("./Room.bs.js");
var Decode$CizenChat = require("./Decode.bs.js");
var Message$CizenChat = require("./Message.bs.js");
var RoomList$CizenChat = require("./RoomList.bs.js");
var RoomTitle$CizenChat = require("./RoomTitle.bs.js");
var MessageMap$CizenChat = require("./MessageMap.bs.js");
var MessageList$CizenChat = require("./MessageList.bs.js");
var ThemeChanger$CizenChat = require("./ThemeChanger.bs.js");

function subtract(a1, a2) {
  var l2 = $$Array.to_list(a2);
  return $$Array.of_list(List.filter((function (e) {
                      return !List.mem(e, l2);
                    }))($$Array.to_list(a1)));
}

var component = ReasonReact.reducerComponent("App");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* Connect */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1];
              var tmp;
              if (typeof match === "number") {
                tmp = React.createElement("div", undefined, "Connecting...");
              } else {
                var match$1 = match[0];
                var selected = match$1[/* selected */8];
                var entered = match$1[/* entered */5];
                var rooms = match$1[/* rooms */3];
                var tmp$1;
                if (selected !== undefined) {
                  var room = selected;
                  tmp$1 = React.createElement(React.Fragment, undefined, React.createElement("div", {
                            className: "c-chat-header"
                          }, ReasonReact.element(undefined, undefined, RoomTitle$CizenChat.make(Room$CizenChat.getRoomName(room, rooms), (function (name) {
                                      return Curry._1(self[/* send */3], /* SendRoomSetting */Block.__(5, [
                                                    name,
                                                    undefined
                                                  ]));
                                    }), /* array */[])), ReasonReact.element(undefined, undefined, ThemeChanger$CizenChat.make((function (color) {
                                      return Curry._1(self[/* send */3], /* SendRoomSetting */Block.__(5, [
                                                    undefined,
                                                    color
                                                  ]));
                                    }), /* array */[]))), ReasonReact.element(undefined, undefined, MessageList$CizenChat.make(Message$CizenChat.getMsg(room, match$1[/* messages */6]), /* array */[])));
                } else {
                  tmp$1 = React.createElement("p", undefined, "Select or create a room");
                }
                tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
                          className: Room$CizenChat.roomClassName(selected, rooms)
                        }, React.createElement("header", {
                              className: "c-header"
                            }, "CizenChat"), React.createElement("div", {
                              className: "p-side-content"
                            }, React.createElement("div", {
                                  className: "c-user"
                                }, "#" + match$1[/* id */0]), React.createElement("button", {
                                  className: "c-button",
                                  onClick: (function (_event) {
                                      return Curry._1(self[/* send */3], /* RoomCreate */1);
                                    })
                                }, "Create Room"), ReasonReact.element(undefined, undefined, RoomList$CizenChat.make("Available Rooms", Room$CizenChat.byIds(subtract(match$1[/* available */4], entered), rooms), (function (room) {
                                        return Curry._1(self[/* send */3], /* RoomEnter */Block.__(2, [room]));
                                      }), /* array */[])), ReasonReact.element(undefined, undefined, RoomList$CizenChat.make("Joined Rooms", Room$CizenChat.byIds(entered, rooms), (function (room) {
                                        return Curry._1(self[/* send */3], /* RoomSelect */Block.__(3, [room]));
                                      }), /* array */[])))), React.createElement("div", {
                          className: "p-chat"
                        }, React.createElement("div", {
                              className: "c-chat"
                            }, tmp$1), React.createElement("div", {
                              className: "c-text-area-wrapper"
                            }, React.createElement("div", {
                                  className: "c-text-area"
                                }, React.createElement("textarea", {
                                      placeholder: "What's up?",
                                      rows: 1,
                                      value: match$1[/* text */7],
                                      onKeyDown: (function ($$event) {
                                          if ($$event.keyCode === 13) {
                                            $$event.preventDefault();
                                            return Curry._1(self[/* send */3], /* Send */2);
                                          } else {
                                            return 0;
                                          }
                                        }),
                                      onChange: (function ($$event) {
                                          return Curry._1(self[/* send */3], /* UpdateText */Block.__(7, [$$event.target.value]));
                                        })
                                    })))), React.createElement("div", {
                          className: "p-avatars"
                        }));
              }
              return React.createElement("div", {
                          className: "p-container"
                        }, tmp);
            }),
          /* initialState */(function (param) {
              return /* Connecting */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var eta = Phx.initSocket(undefined, "/socket");
                                    var socket = Phx.connectSocket(undefined, eta);
                                    var channel = (function (eta) {
                                          return Phx.initChannel("lounge:hello", undefined, eta);
                                        })(socket);
                                    var eta$1 = Phx.putOn("room:setting", (function (res) {
                                            var match = Decode$CizenChat.setting(res);
                                            return Curry._1(self[/* send */3], /* ReceiveRoomSetting */Block.__(4, [
                                                          match[/* room_id */0],
                                                          match[/* name */1],
                                                          match[/* color */2]
                                                        ]));
                                          }), Phx.putOn("room:message", (function (res) {
                                                var match = Decode$CizenChat.receive(res);
                                                return Curry._1(self[/* send */3], /* Receive */Block.__(6, [
                                                              match[/* source */0],
                                                              match[/* room_id */1],
                                                              match[/* body */2]
                                                            ]));
                                              }), channel));
                                    Phx.putReceive("ok", (function (res) {
                                            var welcome = Decode$CizenChat.welcome(res);
                                            return Curry._1(self[/* send */3], /* Connected */Block.__(0, [
                                                          welcome[/* id */0],
                                                          socket,
                                                          channel
                                                        ]));
                                          }), Phx.joinChannel(undefined, eta$1));
                                    return /* () */0;
                                  })]);
                  case 1 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var match = self[/* state */1];
                                    if (typeof match === "number") {
                                      return /* () */0;
                                    } else {
                                      var match$1 = match[0];
                                      Phx.putReceive("ok", (function (res) {
                                              var match = Decode$CizenChat.setting(res);
                                              return Curry._1(self[/* send */3], /* RoomCreated */Block.__(1, [
                                                            match[/* room_id */0],
                                                            match[/* name */1],
                                                            match[/* color */2]
                                                          ]));
                                            }), Phx.push("room:create", {
                                                source: match$1[/* id */0]
                                              }, undefined, match$1[/* channel */2]));
                                      return /* () */0;
                                    }
                                  })]);
                  case 2 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var match = self[/* state */1];
                                    if (typeof match === "number") {
                                      return /* () */0;
                                    } else {
                                      var match$1 = match[0];
                                      var selected = match$1[/* selected */8];
                                      if (selected !== undefined) {
                                        var room = selected;
                                        var text = match$1[/* text */7];
                                        var id = match$1[/* id */0];
                                        Phx.push("room:message", {
                                              source: id,
                                              room_id: room,
                                              body: text
                                            }, undefined, match$1[/* channel */2]);
                                        Curry._1(self[/* send */3], /* Receive */Block.__(6, [
                                                id,
                                                room,
                                                text
                                              ]));
                                        return Curry._1(self[/* send */3], /* UpdateText */Block.__(7, [""]));
                                      } else {
                                        return /* () */0;
                                      }
                                    }
                                  })]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* Ready */[/* record */[
                                    /* id */action[0],
                                    /* socket */action[1],
                                    /* channel */action[2],
                                    /* rooms */Room$CizenChat.RoomMap[/* empty */0],
                                    /* available : array */[],
                                    /* entered : array */[],
                                    /* messages */MessageMap$CizenChat.MessageMap[/* empty */0],
                                    /* text */"",
                                    /* selected */undefined
                                  ]]]);
                  case 1 : 
                      var room_id = action[0];
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var state$1 = state[0];
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */state$1[/* id */0],
                                      /* socket */state$1[/* socket */1],
                                      /* channel */state$1[/* channel */2],
                                      /* rooms */Room$CizenChat.upsertRoom(room_id, action[1], action[2], state$1[/* rooms */3]),
                                      /* available */Room$CizenChat.uniqRooms(room_id, state$1[/* available */4]),
                                      /* entered */Room$CizenChat.uniqRooms(room_id, state$1[/* entered */5]),
                                      /* messages */state$1[/* messages */6],
                                      /* text */state$1[/* text */7],
                                      /* selected */room_id
                                    ]]]);
                      }
                  case 2 : 
                      var room_id$1 = action[0];
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var state$2 = state[0];
                        Phx.push("room:enter", {
                              source: state$2[/* id */0],
                              room_id: room_id$1
                            }, undefined, state$2[/* channel */2]);
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */state$2[/* id */0],
                                      /* socket */state$2[/* socket */1],
                                      /* channel */state$2[/* channel */2],
                                      /* rooms */state$2[/* rooms */3],
                                      /* available */state$2[/* available */4],
                                      /* entered */Room$CizenChat.uniqRooms(room_id$1, state$2[/* entered */5]),
                                      /* messages */state$2[/* messages */6],
                                      /* text */state$2[/* text */7],
                                      /* selected */room_id$1
                                    ]]]);
                      }
                  case 3 : 
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var state$3 = state[0];
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */state$3[/* id */0],
                                      /* socket */state$3[/* socket */1],
                                      /* channel */state$3[/* channel */2],
                                      /* rooms */state$3[/* rooms */3],
                                      /* available */state$3[/* available */4],
                                      /* entered */state$3[/* entered */5],
                                      /* messages */state$3[/* messages */6],
                                      /* text */state$3[/* text */7],
                                      /* selected */action[0]
                                    ]]]);
                      }
                  case 4 : 
                      var room_id$2 = action[0];
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var state$4 = state[0];
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */state$4[/* id */0],
                                      /* socket */state$4[/* socket */1],
                                      /* channel */state$4[/* channel */2],
                                      /* rooms */Room$CizenChat.upsertRoom(room_id$2, action[1], action[2], state$4[/* rooms */3]),
                                      /* available */Room$CizenChat.uniqRooms(room_id$2, state$4[/* available */4]),
                                      /* entered */state$4[/* entered */5],
                                      /* messages */state$4[/* messages */6],
                                      /* text */state$4[/* text */7],
                                      /* selected */state$4[/* selected */8]
                                    ]]]);
                      }
                  case 5 : 
                      var color_opt = action[1];
                      var name_opt = action[0];
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var match = self[/* state */1];
                                    if (typeof match === "number") {
                                      return /* () */0;
                                    } else {
                                      var match$1 = match[0];
                                      var selected = match$1[/* selected */8];
                                      if (selected !== undefined) {
                                        var room = selected;
                                        var rooms = match$1[/* rooms */3];
                                        var name = name_opt !== undefined ? name_opt : Room$CizenChat.getRoomName(room, rooms);
                                        var color = color_opt !== undefined ? color_opt : Room$CizenChat.getRoomColor(room, rooms);
                                        Phx.push("room:setting", {
                                              source: match$1[/* id */0],
                                              room_id: room,
                                              name: name,
                                              color: color
                                            }, undefined, match$1[/* channel */2]);
                                        return Curry._1(self[/* send */3], /* ReceiveRoomSetting */Block.__(4, [
                                                      room,
                                                      name,
                                                      color
                                                    ]));
                                      } else {
                                        return /* () */0;
                                      }
                                    }
                                  })]);
                  case 6 : 
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var state$5 = state[0];
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */state$5[/* id */0],
                                      /* socket */state$5[/* socket */1],
                                      /* channel */state$5[/* channel */2],
                                      /* rooms */state$5[/* rooms */3],
                                      /* available */state$5[/* available */4],
                                      /* entered */state$5[/* entered */5],
                                      /* messages */Message$CizenChat.addMsg(action[0], action[1], action[2], state$5[/* messages */6]),
                                      /* text */state$5[/* text */7],
                                      /* selected */state$5[/* selected */8]
                                    ]]]);
                      }
                  case 7 : 
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var state$6 = state[0];
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */state$6[/* id */0],
                                      /* socket */state$6[/* socket */1],
                                      /* channel */state$6[/* channel */2],
                                      /* rooms */state$6[/* rooms */3],
                                      /* available */state$6[/* available */4],
                                      /* entered */state$6[/* entered */5],
                                      /* messages */state$6[/* messages */6],
                                      /* text */action[0],
                                      /* selected */state$6[/* selected */8]
                                    ]]]);
                      }
                  
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.subtract = subtract;
exports.component = component;
exports.make = make;
/* component Not a pure module */
