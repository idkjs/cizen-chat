// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Phx = require("bucklescript-phx/src/phx.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("App");

function handleSend(_, _$1) {
  console.log("send");
  return /* () */0;
}

function handleReiceive($$event, any) {
  switch ($$event) {
    case "error" : 
        console.log(/* tuple */[
              "handleReiceive:" + $$event,
              "Failed to join channel"
            ]);
        return /* () */0;
    case "ok" : 
        console.log(/* tuple */[
              "handleReiceive:" + $$event,
              "Joined"
            ]);
        return /* () */0;
    default:
      console.log(/* tuple */[
            "handleReiceive:" + $$event,
            any
          ]);
      return /* () */0;
  }
}

function response(json) {
  return /* record */[/* id */Json_decode.field("id", Json_decode.string, json)];
}

var Decode = /* module */[/* response */response];

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* Connect */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", undefined, React.createElement("h1", undefined, "CizenChat"), React.createElement("button", {
                              onClick: (function () {
                                  return Curry._1(self[/* send */3], /* Message */1);
                                })
                            }, "Send"));
            }),
          /* initialState */(function () {
              return /* Connecting */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* SideEffects */Block.__(1, [(function (self) {
                                console.log("Message");
                                var match = self[/* state */1];
                                if (typeof match === "number") {
                                  return /* () */0;
                                } else {
                                  Phx.push("room:message", {
                                        avatar_id: match[0],
                                        body: "Greetings from ReasonReact!"
                                      }, undefined, match[2]);
                                  return /* () */0;
                                }
                              })]);
                } else {
                  return /* SideEffects */Block.__(1, [(function (self) {
                                var eta = Phx.initSocket(undefined, "/socket");
                                var socket = Phx.connectSocket(undefined, eta);
                                var channel = (function (eta) {
                                      return Phx.initChannel("lounge:hello", undefined, eta);
                                    })(socket);
                                Phx.putReceive("error", (function (param) {
                                        return handleReiceive("error", param);
                                      }), Phx.putReceive("ok", (function (res) {
                                            var avatar_id = response(res)[/* id */0];
                                            return Curry._1(self[/* send */3], /* Connected */[
                                                        avatar_id,
                                                        socket,
                                                        channel
                                                      ]);
                                          }), Phx.joinChannel(undefined, channel)));
                                return /* () */0;
                              })]);
                }
              } else {
                return /* Update */Block.__(0, [/* Ready */[
                            action[0],
                            action[1],
                            action[2]
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.handleSend = handleSend;
exports.handleReiceive = handleReiceive;
exports.Decode = Decode;
exports.make = make;
/* component Not a pure module */
