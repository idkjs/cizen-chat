// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var Phx = require("bucklescript-phx/src/phx.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var compare = Caml_obj.caml_compare;

var MsgMap = $$Map.Make(/* module */[/* compare */compare]);

function addMsg(avatar_id, room, body, map) {
  var msg = /* record */[
    /* body */body,
    /* avatar_id */avatar_id
  ];
  if (Curry._2(MsgMap[/* mem */2], room, map)) {
    var messages = Curry._2(MsgMap[/* find */21], room, map);
    return Curry._3(MsgMap[/* add */3], room, $$Array.concat(/* :: */[
                    messages,
                    /* :: */[
                      /* array */[msg],
                      /* [] */0
                    ]
                  ]), map);
  } else {
    return Curry._3(MsgMap[/* add */3], room, /* array */[msg], map);
  }
}

function getMsg(room, map) {
  try {
    return Curry._2(MsgMap[/* find */21], room, map);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* array */[];
    } else {
      throw exn;
    }
  }
}

var compare$1 = Caml_obj.caml_compare;

var RoomMap = $$Map.Make(/* module */[/* compare */compare$1]);

function uniqRooms(room_id, rooms) {
  var rooms_l = $$Array.to_list(rooms);
  if (List.mem(room_id, rooms_l)) {
    return rooms;
  } else {
    return $$Array.concat(/* :: */[
                rooms,
                /* :: */[
                  /* array */[room_id],
                  /* [] */0
                ]
              ]);
  }
}

function upsertRoom(room_id, color, rooms) {
  var room = /* record */[
    /* id */room_id,
    /* color */color
  ];
  return Curry._3(RoomMap[/* add */3], room_id, room, rooms);
}

function roomClassName(room_id_opt, rooms) {
  var color;
  if (room_id_opt !== undefined) {
    try {
      color = Curry._2(RoomMap[/* find */21], room_id_opt, rooms)[/* color */1];
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        color = "green";
      } else {
        throw exn;
      }
    }
  } else {
    color = "green";
  }
  return "p-rooms p-rooms--" + color;
}

function subtract(a1, a2) {
  var l2 = $$Array.to_list(a2);
  return $$Array.of_list(List.filter((function (e) {
                      return !List.mem(e, l2);
                    }))($$Array.to_list(a1)));
}

var component = ReasonReact.reducerComponent("App");

function welcome(json) {
  return /* record */[/* id */Json_decode.field("id", Json_decode.string, json)];
}

function created(json) {
  return /* record */[/* room_id */Json_decode.field("room_id", Json_decode.string, json)];
}

function receive(json) {
  return /* record */[
          /* source */Json_decode.field("source", Json_decode.string, json),
          /* room_id */Json_decode.field("room_id", Json_decode.string, json),
          /* body */Json_decode.field("body", Json_decode.string, json)
        ];
}

function setting(json) {
  return /* record */[
          /* room_id */Json_decode.field("room_id", Json_decode.string, json),
          /* color */Json_decode.field("color", Json_decode.string, json)
        ];
}

var Decode = /* module */[
  /* welcome */welcome,
  /* created */created,
  /* receive */receive,
  /* setting */setting
];

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* Connect */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1];
              var tmp;
              if (typeof match === "number") {
                tmp = React.createElement("div", undefined, "Connecting...");
              } else {
                var match$1 = match[0];
                var selected = match$1[/* selected */8];
                var entered = match$1[/* entered */5];
                var tmp$1;
                if (selected !== undefined) {
                  var room = selected;
                  tmp$1 = React.createElement(React.Fragment, undefined, React.createElement("div", {
                            className: "c-chat-header"
                          }, React.createElement("span", undefined, "Room #" + room), React.createElement("div", {
                                className: "c-colors"
                              }, React.createElement("div", {
                                    className: "c-colors-item c-colors-item--red",
                                    onClick: (function () {
                                        return Curry._1(self[/* send */3], /* SendRoomSetting */Block.__(5, ["red"]));
                                      })
                                  }), React.createElement("div", {
                                    className: "c-colors-item c-colors-item--green",
                                    onClick: (function () {
                                        return Curry._1(self[/* send */3], /* SendRoomSetting */Block.__(5, ["green"]));
                                      })
                                  }), React.createElement("div", {
                                    className: "c-colors-item c-colors-item--blue",
                                    onClick: (function () {
                                        return Curry._1(self[/* send */3], /* SendRoomSetting */Block.__(5, ["blue"]));
                                      })
                                  }))), React.createElement("div", undefined, $$Array.mapi((function (i, msg) {
                                  return React.createElement("div", {
                                              key: String(i),
                                              className: "c-message"
                                            }, React.createElement("b", undefined, msg[/* body */0]), React.createElement("i", undefined, " by " + msg[/* avatar_id */1]));
                                }), getMsg(room, match$1[/* messages */6]))));
                } else {
                  tmp$1 = React.createElement("p", undefined, "Select or create a room");
                }
                tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
                          className: roomClassName(selected, match$1[/* rooms */3])
                        }, React.createElement("header", {
                              className: "c-header"
                            }, "CizenChat"), React.createElement("div", {
                              className: "p-side-content"
                            }, React.createElement("div", {
                                  className: "c-user"
                                }, "#" + match$1[/* id */0]), React.createElement("button", {
                                  className: "c-button",
                                  onClick: (function () {
                                      return Curry._1(self[/* send */3], /* RoomCreate */1);
                                    })
                                }, "Create Room"), React.createElement("div", {
                                  className: "c-list"
                                }, React.createElement("div", {
                                      className: "c-list-header"
                                    }, "Available Rooms"), React.createElement("div", {
                                      className: "c-list-body"
                                    }, $$Array.map((function (room) {
                                            return React.createElement("div", {
                                                        key: room,
                                                        className: "c-list-item",
                                                        onClick: (function () {
                                                            return Curry._1(self[/* send */3], /* RoomEnter */Block.__(2, [room]));
                                                          })
                                                      }, room);
                                          }), subtract(match$1[/* available */4], entered)))), React.createElement("div", {
                                  className: "c-list"
                                }, React.createElement("div", {
                                      className: "c-list-header"
                                    }, "Joined Rooms"), React.createElement("div", {
                                      className: "c-list-body"
                                    }, $$Array.map((function (room) {
                                            return React.createElement("div", {
                                                        key: room,
                                                        className: "c-list-item",
                                                        onClick: (function () {
                                                            return Curry._1(self[/* send */3], /* RoomSelect */Block.__(3, [room]));
                                                          })
                                                      }, room);
                                          }), entered))))), React.createElement("div", {
                          className: "p-chat"
                        }, React.createElement("div", {
                              className: "c-chat"
                            }, tmp$1), React.createElement("div", {
                              className: "c-text-area-wrapper"
                            }, React.createElement("div", {
                                  className: "c-text-area"
                                }, React.createElement("textarea", {
                                      placeholder: "What's up?",
                                      rows: 1,
                                      value: match$1[/* text */7],
                                      onKeyDown: (function ($$event) {
                                          if ($$event.keyCode === 13) {
                                            $$event.preventDefault();
                                            return Curry._1(self[/* send */3], /* Send */2);
                                          } else {
                                            return 0;
                                          }
                                        }),
                                      onChange: (function ($$event) {
                                          return Curry._1(self[/* send */3], /* UpdateText */Block.__(7, [$$event.target.value]));
                                        })
                                    })))), React.createElement("div", {
                          className: "p-avatars"
                        }));
              }
              return React.createElement("div", {
                          className: "p-container"
                        }, tmp);
            }),
          /* initialState */(function () {
              return /* Connecting */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var eta = Phx.initSocket(undefined, "/socket");
                                    var socket = Phx.connectSocket(undefined, eta);
                                    var channel = (function (eta) {
                                          return Phx.initChannel("lounge:hello", undefined, eta);
                                        })(socket);
                                    var eta$1 = Phx.putOn("room:setting", (function (res) {
                                            var match = setting(res);
                                            return Curry._1(self[/* send */3], /* ReceiveRoomSetting */Block.__(4, [
                                                          match[/* room_id */0],
                                                          match[/* color */1]
                                                        ]));
                                          }), Phx.putOn("room:message", (function (res) {
                                                var match = receive(res);
                                                return Curry._1(self[/* send */3], /* Receive */Block.__(6, [
                                                              match[/* source */0],
                                                              match[/* room_id */1],
                                                              match[/* body */2]
                                                            ]));
                                              }), channel));
                                    Phx.putReceive("ok", (function (res) {
                                            var welcome$1 = welcome(res);
                                            return Curry._1(self[/* send */3], /* Connected */Block.__(0, [
                                                          welcome$1[/* id */0],
                                                          socket,
                                                          channel
                                                        ]));
                                          }), Phx.joinChannel(undefined, eta$1));
                                    return /* () */0;
                                  })]);
                  case 1 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var match = self[/* state */1];
                                    if (typeof match === "number") {
                                      return /* () */0;
                                    } else {
                                      var match$1 = match[0];
                                      Phx.putReceive("ok", (function (res) {
                                              var room_id = created(res)[/* room_id */0];
                                              return Curry._1(self[/* send */3], /* RoomCreated */Block.__(1, [room_id]));
                                            }), Phx.push("room:create", {
                                                source: match$1[/* id */0]
                                              }, undefined, match$1[/* channel */2]));
                                      return /* () */0;
                                    }
                                  })]);
                  case 2 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var match = self[/* state */1];
                                    if (typeof match === "number") {
                                      return /* () */0;
                                    } else {
                                      var match$1 = match[0];
                                      var selected = match$1[/* selected */8];
                                      if (selected !== undefined) {
                                        var room = selected;
                                        var text = match$1[/* text */7];
                                        var id = match$1[/* id */0];
                                        Phx.push("room:message", {
                                              source: id,
                                              room_id: room,
                                              body: text
                                            }, undefined, match$1[/* channel */2]);
                                        Curry._1(self[/* send */3], /* Receive */Block.__(6, [
                                                id,
                                                room,
                                                text
                                              ]));
                                        return Curry._1(self[/* send */3], /* UpdateText */Block.__(7, [""]));
                                      } else {
                                        return /* () */0;
                                      }
                                    }
                                  })]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* Ready */[/* record */[
                                    /* id */action[0],
                                    /* socket */action[1],
                                    /* channel */action[2],
                                    /* rooms */RoomMap[/* empty */0],
                                    /* available : array */[],
                                    /* entered : array */[],
                                    /* messages */MsgMap[/* empty */0],
                                    /* text */"",
                                    /* selected */undefined
                                  ]]]);
                  case 1 : 
                      var room_id = action[0];
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var match = state[0];
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */match[/* id */0],
                                      /* socket */match[/* socket */1],
                                      /* channel */match[/* channel */2],
                                      /* rooms */upsertRoom(room_id, "green", match[/* rooms */3]),
                                      /* available */uniqRooms(room_id, match[/* available */4]),
                                      /* entered */uniqRooms(room_id, match[/* entered */5]),
                                      /* messages */match[/* messages */6],
                                      /* text */match[/* text */7],
                                      /* selected */room_id
                                    ]]]);
                      }
                  case 2 : 
                      var room_id$1 = action[0];
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var match$1 = state[0];
                        var channel = match$1[/* channel */2];
                        var id = match$1[/* id */0];
                        Phx.push("room:enter", {
                              source: id,
                              room_id: room_id$1
                            }, undefined, channel);
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */id,
                                      /* socket */match$1[/* socket */1],
                                      /* channel */channel,
                                      /* rooms */match$1[/* rooms */3],
                                      /* available */match$1[/* available */4],
                                      /* entered */uniqRooms(room_id$1, match$1[/* entered */5]),
                                      /* messages */match$1[/* messages */6],
                                      /* text */match$1[/* text */7],
                                      /* selected */room_id$1
                                    ]]]);
                      }
                  case 3 : 
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var match$2 = state[0];
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */match$2[/* id */0],
                                      /* socket */match$2[/* socket */1],
                                      /* channel */match$2[/* channel */2],
                                      /* rooms */match$2[/* rooms */3],
                                      /* available */match$2[/* available */4],
                                      /* entered */match$2[/* entered */5],
                                      /* messages */match$2[/* messages */6],
                                      /* text */match$2[/* text */7],
                                      /* selected */action[0]
                                    ]]]);
                      }
                  case 4 : 
                      var room_id$2 = action[0];
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var match$3 = state[0];
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */match$3[/* id */0],
                                      /* socket */match$3[/* socket */1],
                                      /* channel */match$3[/* channel */2],
                                      /* rooms */upsertRoom(room_id$2, action[1], match$3[/* rooms */3]),
                                      /* available */uniqRooms(room_id$2, match$3[/* available */4]),
                                      /* entered */match$3[/* entered */5],
                                      /* messages */match$3[/* messages */6],
                                      /* text */match$3[/* text */7],
                                      /* selected */match$3[/* selected */8]
                                    ]]]);
                      }
                  case 5 : 
                      var color = action[0];
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    var match = self[/* state */1];
                                    if (typeof match === "number") {
                                      return /* () */0;
                                    } else {
                                      var match$1 = match[0];
                                      var selected = match$1[/* selected */8];
                                      if (selected !== undefined) {
                                        var room = selected;
                                        Phx.push("room:setting", {
                                              source: match$1[/* id */0],
                                              room_id: room,
                                              color: color
                                            }, undefined, match$1[/* channel */2]);
                                        return Curry._1(self[/* send */3], /* ReceiveRoomSetting */Block.__(4, [
                                                      room,
                                                      color
                                                    ]));
                                      } else {
                                        return /* () */0;
                                      }
                                    }
                                  })]);
                  case 6 : 
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var match$4 = state[0];
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */match$4[/* id */0],
                                      /* socket */match$4[/* socket */1],
                                      /* channel */match$4[/* channel */2],
                                      /* rooms */match$4[/* rooms */3],
                                      /* available */match$4[/* available */4],
                                      /* entered */match$4[/* entered */5],
                                      /* messages */addMsg(action[0], action[1], action[2], match$4[/* messages */6]),
                                      /* text */match$4[/* text */7],
                                      /* selected */match$4[/* selected */8]
                                    ]]]);
                      }
                  case 7 : 
                      if (typeof state === "number") {
                        return /* NoUpdate */0;
                      } else {
                        var match$5 = state[0];
                        return /* Update */Block.__(0, [/* Ready */[/* record */[
                                      /* id */match$5[/* id */0],
                                      /* socket */match$5[/* socket */1],
                                      /* channel */match$5[/* channel */2],
                                      /* rooms */match$5[/* rooms */3],
                                      /* available */match$5[/* available */4],
                                      /* entered */match$5[/* entered */5],
                                      /* messages */match$5[/* messages */6],
                                      /* text */action[0],
                                      /* selected */match$5[/* selected */8]
                                    ]]]);
                      }
                  
                }
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.MsgMap = MsgMap;
exports.addMsg = addMsg;
exports.getMsg = getMsg;
exports.RoomMap = RoomMap;
exports.uniqRooms = uniqRooms;
exports.upsertRoom = upsertRoom;
exports.roomClassName = roomClassName;
exports.subtract = subtract;
exports.component = component;
exports.Decode = Decode;
exports.make = make;
/* MsgMap Not a pure module */
